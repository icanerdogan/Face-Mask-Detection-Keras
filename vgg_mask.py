# -*- coding: utf-8 -*-
"""VGG-Mask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12D6irSSxVChuG4YAa3AOr8pfQPUyWntC

### Import Library
"""

import keras,os
from keras.models import Sequential
from keras.applications.vgg16 import VGG16
from keras.layers import Dense, Conv2D, MaxPool2D , Flatten
from keras.preprocessing.image import ImageDataGenerator
from keras.losses import categorical_crossentropy
from keras.optimizers import Adam

import numpy as np

"""### Determination Of Train And Test"""

trdata = ImageDataGenerator()
traindata = trdata.flow_from_directory(directory="./images/Training",target_size=(224,224))
tsdata = ImageDataGenerator()
testdata = tsdata.flow_from_directory(directory="./images/Test", target_size=(224,224))

"""### Delete Last Layer of VGG16 and Add Layer"""

vgg16_model=VGG16()
model = Sequential(vgg16_model.layers[:-1])
model.add(Dense(2, activation="softmax"))

"""### Model Compile"""

opt = Adam(lr=0.001)
model.compile(optimizer=opt, loss=categorical_crossentropy, metrics=['accuracy'])

"""### Checkpoint & Early Stopping"""

from keras.callbacks import ModelCheckpoint, EarlyStopping
checkpoint = ModelCheckpoint("vgg-mask.h5", 
                             monitor='accuracy', 
                             verbose=1, 
                             save_best_only=True, 
                             save_weights_only=False, 
                             mode='auto', period=1)

early = EarlyStopping(monitor='accuracy', 
                      min_delta=0, 
                      patience=20, 
                      verbose=1, mode='auto')

"""### Model Fit"""

epochs=10
train_examples=2246
hist = model.fit_generator(steps_per_epoch=50,
                           generator=traindata, 
                           validation_data= testdata, 
                           validation_steps=10,
                           epochs=epochs,
                           callbacks=[checkpoint,early])

"""### Model Visualization"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
plt.plot(hist.history["accuracy"])
plt.plot(hist.history['val_accuracy'])
plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title("model accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Epoch")
plt.legend(["Accuracy","Validation Accuracy","loss","Validation Loss"])
plt.show()

"""### Load Model"""

from keras.models import load_model
saved_model = load_model("vgg-mask.h5")

"""### Predict Visualization"""

from PIL import Image               
from IPython.display import display 
from keras.preprocessing import image
import matplotlib.pyplot as plt
import os

directory = r'./images/Validation'

for filename in os.listdir(directory):
  img = image.load_img("./images/Validation/"+filename, target_size=(224,224))
  display(img)
  img = np.asarray(img)
  img = np.expand_dims(img, axis=0)
  output = saved_model.predict(img)

  if output[0][0] > output[0][1]:
    print("MASK")
  else:
    print('WITHOUT MASK')
  print("-----------------------------")

